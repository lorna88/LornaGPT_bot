from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, \
    CallbackQueryHandler, CommandHandler, ContextTypes, ConversationHandler
from telegram.warnings import PTBUserWarning

from credentials import ChatGPT_TOKEN, Telegram_TOKEN
from gpt import ChatGptService
from util import load_message, load_prompt, send_text_buttons, send_text, \
    send_image, show_main_menu
from warnings import filterwarnings

filterwarnings(action="ignore", message=r".*CallbackQueryHandler", category=PTBUserWarning)

MAIN, GPT, TALK, QUIZ, TRANSLATE, COMPANION = range(6)

# –í—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    –í—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞
    """
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'translate': '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç üá¨üáß',
        'companion': '–ü–æ–±–µ—Å–µ–¥–æ–≤–∞—Ç—å —Å –∂–∏—Ç–µ–ª–µ–º –æ–¥–Ω–æ–π –∏–∑ —Å—Ç—Ä–∞–Ω ü§ù'
        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–æ —Ç–∞–∫:
        # 'command': 'button text'

    })
    return MAIN

# –£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random
    –ó–∞–ø—Ä–æ—Å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ –æ—Ç ChatGPT
    """
    prompt = load_prompt('random')
    message = load_message('random')

    await send_image(update, context, 'random')
    message = await send_text(update, context, message)

    answer = await chat_gpt.send_question(prompt, '')
    await message.edit_text(answer)
    return MAIN

# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT
async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /gpt
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å ChatGPT
    """
    prompt = load_prompt('gpt')
    message = load_message('gpt')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'gpt')
    await send_text(update, context, message)
    return GPT

async def gpt_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ —Å ChatGPT
    """
    text = update.message.text
    message = await send_text(update, context, "–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...")
    answer = await chat_gpt.add_message(text)
    await message.edit_text(answer)
    return GPT

# –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é
async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /talk
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å ChatGPT –æ—Ç –∏–º–µ–Ω–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
    """
    message = load_message('talk')
    await send_image(update, context, 'talk')
    await send_text_buttons(update, context, message, {
        'talk_cobain': '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω',
        'talk_queen': '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ II',
        'talk_tolkien': '–î–∂–æ–Ω –¢–æ–ª–∫–∏–µ–Ω',
        'talk_nietzsche': '–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ',
        'talk_hawking': '–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥'
    })
    return TALK

async def talk_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–∏—Ü
    """
    await update.callback_query.answer()
    cb = update.callback_query.data

    prompt = load_prompt(cb)
    chat_gpt.set_prompt(prompt)

    await send_image(update, context, cb)
    await send_text(update, context, '–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å')
    return TALK

async def talk_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é
    """
    text = update.message.text
    answer = await chat_gpt.add_message(text)
    await send_text(update, context, answer)
    return TALK

# –ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ
async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /quiz
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ—Ç ChatGPT
    """
    context.user_data["quiz_count"] = 0
    context.user_data["quiz_score"] = 0
    message = load_message('quiz')

    prompt = load_prompt('quiz')
    chat_gpt.set_prompt(prompt)

    await send_image(update, context, 'quiz')
    await send_text_buttons(update, context, message, {
        'quiz_prog': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python',
        'quiz_math': '–¢–µ–æ—Ä–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –º–Ω–æ–∂–µ—Å—Ç–≤ –∏ –º–∞—Ç–∞–Ω–∞–ª–∏–∑–∞',
        'quiz_biology': '–ë–∏–æ–ª–æ–≥–∏—è'
    })
    return QUIZ

async def quiz_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    """
    await update.callback_query.answer()
    cb = update.callback_query.data
    if cb == 'quiz_more':
        context.user_data["quiz_count"] += 1
    else:
        context.user_data["quiz_count"] = 1
        context.user_data["quiz_score"] = 0
        await send_text(update, context, '–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!')
    answer = await chat_gpt.add_message(cb)
    await send_text(update, context, answer)
    return QUIZ

async def quiz_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    """
    text = update.message.text
    answer = await chat_gpt.add_message(text)
    if answer == '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!':
        context.user_data["quiz_score"] += 1
    await send_text(update, context, answer)
    await send_text_buttons(update, context, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {context.user_data["quiz_score"]} –∏–∑ {context.user_data["quiz_count"]}', {
        'quiz_more': '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'
    })
    return QUIZ

# –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
async def translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /translate
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞
    """
    prompt = load_prompt('translate')
    message = load_message('translate')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'translate')
    await send_text_buttons(update, context, message, {
        'trans_ru': '–†—É—Å—Å–∫–∏–π',
        'trans_en': 'English',
        'trans_ge': 'Deutsch',
        'trans_fr': 'Fran√ßais',
        'trans_sp': 'Espa√±ol'
    })
    return TRANSLATE

async def translate_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
    """
    await update.callback_query.answer()
    await send_text(update, context, '–ß—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?')
    cb = update.callback_query.data
    await chat_gpt.add_message(cb)
    return TRANSLATE

async def translate_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
    """
    text = update.message.text
    message = await send_text(update, context, "–ü–µ—Ä–µ–≤–æ–∂—É —Ç–µ–∫—Å—Ç...")
    answer = await chat_gpt.add_message(text)
    await message.edit_text(answer)
    return TRANSLATE

# –ü–æ–±–µ—Å–µ–¥–æ–≤–∞—Ç—å —Å –∂–∏—Ç–µ–ª–µ–º –æ–¥–Ω–æ–π –∏–∑ —Å—Ç—Ä–∞–Ω
async def companion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /companion
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º
    """
    prompt = load_prompt('companion')
    message = load_message('companion')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'companion')
    await send_text_buttons(update, context, message, {
        'comp_ru': '–†–æ—Å—Å–∏—è',
        'comp_us': 'USA',
        'comp_uk': 'United Kingdom',
        'comp_ge': 'Deutschland',
        'comp_sp': 'Espa√±ol'
    })
    return COMPANION

async def companion_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    """
    await update.callback_query.answer()
    cb = update.callback_query.data
    answer = await chat_gpt.add_message(cb)
    await send_text(update, context, answer)
    return COMPANION

async def companion_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ —Å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º
    """
    text = update.message.text
    answer = await chat_gpt.add_message(text)
    await send_text(update, context, answer)
    return COMPANION

# –≠—Ö–æ-–±–æ—Ç
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º
    """
    await send_text(update, context, update.message.text)
    return MAIN

chat_gpt = ChatGptService(ChatGPT_TOKEN)
app = ApplicationBuilder().token(Telegram_TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        MAIN: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, echo)
        ],
        GPT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, gpt_dialog)
        ],
        TALK: [
            CallbackQueryHandler(talk_button),
            MessageHandler(filters.TEXT & ~filters.COMMAND, talk_dialog)
        ],
        QUIZ: [
            CallbackQueryHandler(quiz_button),
            MessageHandler(filters.TEXT & ~filters.COMMAND, quiz_dialog)
        ],
        TRANSLATE: [
            CallbackQueryHandler(translate_button),
            MessageHandler(filters.TEXT & ~filters.COMMAND, translate_dialog)
        ],
        COMPANION: [
            CallbackQueryHandler(companion_button),
            MessageHandler(filters.TEXT & ~filters.COMMAND, companion_dialog)
        ],
    },
    fallbacks=[
        CommandHandler("start", start),
        CommandHandler('random', random),
        CommandHandler('gpt', gpt),
        CommandHandler('talk', talk),
        CommandHandler('quiz', quiz),
        CommandHandler('translate', translate),
        CommandHandler('companion', companion)
    ],
)

app.add_handler(conv_handler)
app.run_polling()
