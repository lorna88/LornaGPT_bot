from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, \
    CallbackQueryHandler, CommandHandler, ContextTypes, ChatMemberHandler

from credentials import ChatGPT_TOKEN, Telegram_TOKEN
from gpt import ChatGptService
from util import load_message, load_prompt, send_text_buttons, send_text, \
    send_image, show_main_menu, Dialog, default_callback_handler


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'main'
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'translate': '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç üá¨üáß',
        'companion': '–ü–æ–±–µ—Å–µ–¥–æ–≤–∞—Ç—å —Å —á–∞—Ç–æ–º GPT –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ ü§ù'
        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–æ —Ç–∞–∫:
        # 'command': 'button text'

    })

async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'random'
    prompt = load_prompt('random')
    message = load_message('random')

    await send_image(update, context, 'random')
    message = await send_text(update, context, message)

    answer = await chat_gpt.send_question(prompt, '')
    await message.edit_text(answer)

async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'gpt'
    prompt = load_prompt('gpt')
    message = load_message('gpt')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'gpt')
    await send_text(update, context, message)

async def gpt_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    message = await send_text(update, context, "–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...")
    answer = await chat_gpt.add_message(text)
    await message.edit_text(answer)

async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'talk'
    message = load_message('talk')
    await send_image(update, context, 'talk')
    await send_text_buttons(update, context, message, {
        'talk_cobain': '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω',
        'talk_queen': '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ II',
        'talk_tolkien': '–î–∂–æ–Ω –¢–æ–ª–∫–∏–µ–Ω',
        'talk_nietzsche': '–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ',
        'talk_hawking': '–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥'
    })

async def talk_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    cb = update.callback_query.data

    prompt = load_prompt(cb)
    chat_gpt.set_prompt(prompt)

    await send_image(update, context, cb)
    await send_text(update, context, '–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å')

async def talk_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    answer = await chat_gpt.add_message(text)
    await send_text(update, context, answer)

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'quiz'
    message = load_message('quiz')

    prompt = load_prompt('quiz')
    chat_gpt.set_prompt(prompt)

    await send_image(update, context, 'quiz')
    await send_text_buttons(update, context, message, {
        'quiz_prog': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python',
        'quiz_math': '–¢–µ–æ—Ä–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –º–Ω–æ–∂–µ—Å—Ç–≤ –∏ –º–∞—Ç–∞–Ω–∞–ª–∏–∑–∞',
        'quiz_biology': '–ë–∏–æ–ª–æ–≥–∏—è'
    })

async def quiz_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    cb = update.callback_query.data
    if cb == 'quiz_more':
        dialog.quiz_count += 1
    else:
        dialog.quiz_count = 0
        dialog.quiz_score = 0
        await send_text(update, context, '–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!')
    answer = await chat_gpt.add_message(cb)
    await send_text(update, context, answer)

async def quiz_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    answer = await chat_gpt.add_message(text)
    if answer == '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!':
        dialog.quiz_score += 1
    await send_text(update, context, answer)
    await send_text_buttons(update, context, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {dialog.quiz_score} –∏–∑ {dialog.quiz_count}', {
        'quiz_more': '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'
    })

async def translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'translate'
    prompt = load_prompt('translate')
    message = load_message('translate')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'translate')
    await send_text_buttons(update, context, message, {
        'trans_ru': '–†—É—Å—Å–∫–∏–π',
        'trans_en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
        'trans_ge': '–ù–µ–º–µ—Ü–∫–∏–π',
        'trans_fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
        'trans_sp': '–ò—Å–ø–∞–Ω—Å–∫–∏–π'
    })

async def translate_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await send_text(update, context, '–ß—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?')
    cb = update.callback_query.data
    await chat_gpt.add_message(cb)

async def translate_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    message = await send_text(update, context, "–ü–µ—Ä–µ–≤–æ–∂—É —Ç–µ–∫—Å—Ç...")
    answer = await chat_gpt.add_message(text)
    await message.edit_text(answer)

async def companion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'companion'
    prompt = load_prompt('companion')
    message = load_message('companion')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'companion')
    await send_text_buttons(update, context, message, {
        'comp_ru': '–†—É—Å—Å–∫–∏–π',
        'comp_en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
        'comp_ge': '–ù–µ–º–µ—Ü–∫–∏–π',
        'comp_fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
        'comp_sp': '–ò—Å–ø–∞–Ω—Å–∫–∏–π'
    })

async def companion_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    cb = update.callback_query.data
    answer = await chat_gpt.add_message(cb)
    await send_text(update, context, answer)

async def companion_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    answer = await chat_gpt.add_message(text)
    await send_text(update, context, answer)

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if dialog.mode == 'gpt':
        await gpt_dialog(update, context)
    elif dialog.mode == 'talk':
        await talk_dialog(update, context)
    elif dialog.mode == 'quiz':
        await quiz_dialog(update, context)
    elif dialog.mode == 'translate':
        await translate_dialog(update, context)
    elif dialog.mode == 'companion':
        await companion_dialog(update, context)
    else:
        await send_text(update, context, update.message.text)

dialog = Dialog()
dialog.mode = None
dialog.quiz_score = 0
dialog.quiz_count = 0
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã dialog

chat_gpt = ChatGptService(ChatGPT_TOKEN)
app = ApplicationBuilder().token(Telegram_TOKEN).build()

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CommandHandler('command', handler_func))
app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler('quiz', quiz))
app.add_handler(CommandHandler('translate', translate))
app.add_handler(CommandHandler('companion', companion))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CallbackQueryHandler(app_button, pattern='^app_.*'))
app.add_handler(CallbackQueryHandler(talk_button, pattern='^talk_.*'))
app.add_handler(CallbackQueryHandler(quiz_button, pattern='^quiz_.*'))
app.add_handler(CallbackQueryHandler(translate_button, pattern='^trans_.*'))
app.add_handler(CallbackQueryHandler(companion_button, pattern='^comp_.*'))
app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
